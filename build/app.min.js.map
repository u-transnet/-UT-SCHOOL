{"version":3,"sources":["obfuscator/beginning.js","cli.js","main.js","api/Api.js","api/BitsharesApiExtends.js","api/BlockchainApi.js","api/StudentApi.js","api/TeacherApi.js","cli/Api.js","cli/StudentApi.js","cli/TeacherApi.js","common/Account.js","common/Configs.js","obfuscator/end.js"],"names":["native_require","this_module","require","p","root","path","resolve","test","basename","module","cache","err","Error","message","stack","exports","call","relative","pathWithSlash","slice","paths","i","register","fn","parent","split","segs","pop","seg","push","join","_commander2","default","version","option","parse","process","argv","password","privateKey","_Api2","patch","nodeUrl","login","then","rl","_readline2","createInterface","input","stdin","output","stdout","prefix","callCommand","inputStr","concat","_toConsumableArray","command","action","outputHelp","close","on","line","trim","setPrompt","length","prompt","exit","_Api","_Account","_StudentApi","_TeacherApi","_BlockchainApi","_bitsharesjs","_Configs","Api","accountName","_classCallCheck","this","account","Account","studentApi","StudentApi","teacherApi","TeacherApi","api","Promise","resolved","rejected","BlockchainApi","init","catch","Login","generateKeys","ChainValidation","required","utSchoolFaucet","keys","reject","all","FetchChain","res","chain_registrar","_slicedToArray","tr","TransactionBuilder","add_type_operation","fee","amount","asset_id","registrar","get","referrer","name","owner","weight_threshold","account_auths","key_auths","pubKeys","address_auths","active","options","memo_key","memo","voting_account","num_witness","num_committee","votes","set_required_fees","console","log","serialize","broadcast","_bitsharesjsWs","object_type","op_history","parseInt","operation_history","BitsharesApiExtends","limit","arguments","undefined","opType","stop","_this","start","operationsList","Apis","instance","history_api","exec","operations","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","operation","value","op","return","_fetchHistory","id","opTypeName","account_id","is_object_id","toJS","ChainStore","objects_by_id","opTypeId","ChainTypes","init_promise","update_head_block","network_name","_BitsharesApiExtends","feeAsset","lectureAccount","utSchoolTokenTicket","_res","studentAccount","sendAsset","from","to","propose","fee_paying_account","add_signer","toPublicKey","toPublicKeyString","_this2","utSchoolTokenSession","utSchoolTokenGrade","_res2","assets","lectureAccountId","studentAccountId","assetsMap","asset","symbol","accepted","balance","getAccountBalance","fetchHistory","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","transferData","_this3","lecturesList","utSchoolAccount","utSchoolToken","_res3","utSchoolAsset","lecturesAccountsList","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","lectures","teachersIds","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","lectureData","teacher","teachers","teachersMap","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","lectureStatePromiseList","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","lecture","getLectureStats","lecturesStates","stats","educationToken","_sendToken","teacherAccount","ticketAsset","lectureParticipantsIds","accounts","accountsMap","lectureParticipants","accountData","_res4","proposals","applications","accountIds","proposal","Date","proposed_transaction","expiration","acceptedOperation","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","operationData","application","lectureApplicationId","_res5","active_approvals_to_add","getLectureParticipants","getLectureApplications","index","onFinish","_this4","_res6","participants","__processLectureQueue","_this5","_res7","lecturesIdsList","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","teachersLecturesList","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","program","__addCommands","_StudentApi2","_TeacherApi2","schoolApi","_","_Api$schoolApi","setPrivateKey","apply","_Api$schoolApi2","_Api$schoolApi3","PrivateKey","fromWif"],"mappings":"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","file":"app.min.js","sourcesContent":[null,"/**\n * Created by superpchelka on 24.02.18.\n */\n\nimport Api from './cli/Api';\nimport Program from 'commander';\nimport readline from 'readline';\n\n\nProgram\n    .version('1.0.0')\n    .option('-l, --login', 'login of your bitshares account')\n    .option('-p, --password', 'password of your bitshares account')\n    .option('-pvk, --privateKey', 'private key of your bitshares account')\n    .option('-n, --nodeUrl', 'url of node to connect')\n    .parse(process.argv);\n\nif(!Program.password && !Program.privateKey)\n    throw \"Error: you must provide password or privateKey for accessing to your bitshares account\";\n\nApi.patch(Program, Program.nodeUrl, Program.login, Program.password, Program.privateKey).then(()=>{\n    const rl = readline.createInterface({\n        input: process.stdin,\n        output: process.stdout\n    });\n    const prefix = '>';\n\n    function callCommand(inputStr) {\n        Program.parse(['', '', ...inputStr.split(' ')]);\n    }\n\n    Program\n        .command('help')\n        .action(()=>{\n            Program.outputHelp();\n        });\n\n    Program\n        .command('exit')\n        .action(()=>{\n            rl.close();\n        });\n\n    rl.on('line', (line)=>{\n        callCommand(line.trim());\n        rl.setPrompt(prefix, prefix.length);\n        rl.prompt();\n    }).on('close', ()=>{\n        process.exit(0);\n    });\n\n    rl.setPrompt(prefix, prefix.length);\n    rl.prompt();\n});\n\n\n\n","/**\n * Created by superpchelka on 24.02.18.\n */\n\nimport {Api} from './api/Api'\n\nexport default Api;","/**\n * Created by superpchelka on 23.02.18.\n */\n\nimport {Account} from '../common/Account'\nimport {StudentApi} from \"./StudentApi\";\nimport {TeacherApi} from \"./TeacherApi\";\nimport {BlockchainApi} from \"./BlockchainApi\"\nimport {FetchChain, TransactionBuilder, ChainValidation, Login} from \"bitsharesjs\";\nimport {utSchoolFaucet} from \"../common/Configs\"\n\n\nclass Api{\n\n\n    /**\n     * @desc initialize api for interacting with blockchain\n     * @param nodeUrl - url of node for connection\n     * @param accountName - name of bitshares account\n     * @param [privateKey] - private of bitshares account (optional)\n     * @return api object\n     */\n    static init(nodeUrl, accountName, privateKey){\n        let api = new Api(accountName, privateKey);\n        return new Promise((resolved, rejected)=>{\n            BlockchainApi.init(nodeUrl).then(()=>resolved(api)).catch(rejected);\n        });\n    }\n\n    /**\n     * @desc generate public keys and private keys by login and password\n     * @param login - login of the bitshares account\n     * @param password - password of the bitshares account\n     * @return Object{\n     *      pubKeys: {active, owner, memo},\n     *      privKeys: {active, owner, memo}\n     * }\n     */\n    static generateKeys(login, password){\n        return Login.generateKeys(login, password)\n    }\n\n    constructor(accountName, privateKey){\n        this.account = new Account(accountName, privateKey);\n        this.studentApi=new StudentApi(this.account);\n        this.teacherApi=new TeacherApi(this.account);\n    }\n\n    /**\n     * @desc set private key of current user\n     * @param privateKey - private key\n     */\n    setPrivateKey(privateKey){\n        this.account.privateKey = privateKey;\n    }\n\n    /**\n     * @desc register user by login, password\n     * @param login - name of the new bitshares account\n     * @param password - password for generating bitshares keys\n     * @return serialized transaction\n     */\n    register(\n        login,\n        password,\n    ) {\n\n        ChainValidation.required(utSchoolFaucet, \"registrar_id\");\n\n        let keys = Api.generateKeys(login, password);\n\n        return new Promise((resolve, reject) => {\n            return Promise.all([\n                FetchChain(\"getAccount\", utSchoolFaucet),\n            ]).then((res)=> {\n                let [ chain_registrar ] = res;\n\n                let tr = new TransactionBuilder();\n                tr.add_type_operation(\"account_create\", {\n                    fee: {\n                        amount: 0,\n                        asset_id: 0\n                    },\n                    \"registrar\": chain_registrar.get(\"id\"),\n                    \"referrer\": chain_registrar.get(\"id\"),\n                    \"name\": login,\n                    \"owner\": {\n                        \"weight_threshold\": 1,\n                        \"account_auths\": [],\n                        \"key_auths\": [[ keys.pubKeys.owner, 1 ]],\n                        \"address_auths\": []\n                    },\n                    \"active\": {\n                        \"weight_threshold\": 1,\n                        \"account_auths\": [ ],\n                        \"key_auths\": [[ keys.pubKeys.active, 1 ]],\n                        \"address_auths\": []\n                    },\n                    \"options\": {\n                        \"memo_key\": keys.pubKeys.memo,\n                        \"voting_account\": \"1.2.5\",\n                        \"num_witness\": 0,\n                        \"num_committee\": 0,\n                        \"votes\": [ ]\n                    }\n                });\n                tr.set_required_fees().then(() => {\n                    console.log(\"serialized transaction:\", tr.serialize());\n                    tr.broadcast();\n                    resolve(tr.serialize());\n                });\n            });\n        });\n    }\n}\n\nexport {Api}","/**\n * Created by superpchelka on 23.02.18.\n */\n\nimport {Apis} from \"bitsharesjs-ws\";\nimport {ChainValidation} from \"bitsharesjs\";\nimport {ChainTypes, ChainStore} from \"bitsharesjs\";\nconst {object_type} = ChainTypes;\nlet op_history   = parseInt(object_type.operation_history, 10);\n\n\nclass BitsharesApiExtends{\n\n\n    /**\n     * @desc internal method for iterating through all operations history\n     * @param account - id of the bitshares account\n     * @param limit - results per butch (max 100)\n     * @param opType - operation type id for filtering\n     * @param stop - recent operation id\n     * @param start - first operation id\n     * @param operationsList - list of already fetched operations\n     * @return list of operations like FetchRecentHistory from bitsharesjs\n     * @private\n     */\n    static _fetchHistory(account, limit = 100, opType, stop, start, operationsList){\n        if(typeof stop === 'undefined')\n            stop = \"1.\" + op_history + \".0\";\n        if(typeof start === 'undefined')\n            start = \"1.\" + op_history + \".0\";\n\n        return new Promise( (resolve, reject) => {\n            Apis.instance().history_api().exec(\"get_account_history\",\n                [ account.get(\"id\"), stop, limit, start])\n                .then( operations => {\n                    for(let operation of operations) {\n                        if (operation.op[0] == opType || typeof opType == 'undefined')\n                            operationsList.push(operation);\n                    }\n\n                    if(operations.length == limit)\n                        this._fetchHistory(account, limit, opType, undefined, operations[0].id, operationsList).then(resolve, reject);\n                    else\n                        resolve(operationsList);\n                });\n        });\n    }\n\n    /**\n     * @desc collect all history of the account\n     * @param account - id of the bitshares account\n     * @param limit - results per butch (max 100)\n     * @param opTypeName - operation type for filtering\n     * @param stop - recent operation id\n     * @param start - first operation id\n     * @return list of operations like FetchRecentHistory from bitsharesjs\n     */\n    static fetchHistory(account, limit = 100, opTypeName, stop, start)\n    {\n        // console.log( \"get account history: \", account )\n        /// TODO: make sure we do not submit a query if there is already one\n        /// in flight...\n        let account_id = account;\n        if( !ChainValidation.is_object_id(account_id) && account.toJS )\n            account_id = account.get(\"id\");\n\n        if( !ChainValidation.is_object_id(account_id)  )\n            return;\n\n        account = ChainStore.objects_by_id.get(account_id);\n        if( !account ) return;\n\n        let opTypeId = ChainTypes.operations[opTypeName];\n        if (typeof opTypeName != 'undefined' && opTypeId === undefined)\n            throw new Error(`unknown operation: ${opTypeName}`);\n\n        return this._fetchHistory(account, limit, opTypeId, stop, start, []);\n    }\n\n\n}\n\nexport {BitsharesApiExtends}","/**\n * Created by superpchelka on 23.02.18.\n */\n\nimport {TransactionBuilder, ChainStore} from \"bitsharesjs\";\nimport {Apis} from \"bitsharesjs-ws\";\n\nclass BlockchainApi{\n\n    static init(nodeUrl){\n        return new Promise((resolved, rejected) => {\n            Apis.instance(nodeUrl, true)\n                .init_promise.then((res) => {\n                Promise.all([\n                    new TransactionBuilder().update_head_block(),\n                    ChainStore.init()\n                ]).then(()=>{\n                    console.log(\"connected to:\", res[0].network_name, \"network\");\n                    resolved();\n                }).catch(rejected);\n            }).catch(rejected);\n        });\n    }\n}\n\nexport {BlockchainApi}","/**\n * Created by superpchelka on 23.02.18.\n */\nimport {ChainStore, FetchChain, TransactionBuilder} from \"bitsharesjs\";\nimport {BitsharesApiExtends} from './BitsharesApiExtends'\nimport {utSchoolTokenTicket, utSchoolTokenSession, utSchoolTokenGrade, utSchoolToken, utSchoolAccount} from '../common/Configs'\n\n\n\nclass StudentApi{\n\n    constructor(account){\n        this.account=account;\n        this.feeAsset='BTS';\n    }\n\n    /**\n     * @desc apply current user for the lecture\n     * @param lectureAccount - name of the bitshares lecture account\n     * @return serialized transaction\n     */\n    applyForLecture(lectureAccount){\n        return new Promise((resolve, reject) => {\n            Promise.all([\n                FetchChain(\"getAccount\", lectureAccount),\n                FetchChain(\"getAccount\", this.account.name),\n                FetchChain(\"getAsset\", utSchoolTokenTicket),\n                FetchChain(\"getAsset\", this.feeAsset)\n            ]).then((res)=> {\n                let [lectureAccount, studentAccount, sendAsset, feeAsset] = res;\n                let tr = new TransactionBuilder();\n\n                tr.add_type_operation(\"transfer\", {\n                    fee: {\n                        amount: 0,\n                        asset_id: feeAsset.get(\"id\")\n                    },\n                    from: lectureAccount.get(\"id\"),\n                    to: studentAccount.get(\"id\"),\n                    amount: { asset_id: sendAsset.get(\"id\"), amount: 1},\n                } );\n\n                tr.propose({\n                    fee_paying_account: studentAccount.get(\"id\"),\n                });\n\n                tr.set_required_fees().then(() => {\n                    tr.add_signer(this.account.privateKey, this.account.privateKey.toPublicKey().toPublicKeyString());\n                    tr.broadcast().catch(reject);\n                    resolve(tr.serialize());\n                }).catch(reject);\n            }).catch(reject);\n        });\n    }\n\n    /**\n     * @desc collect information about lecture\n     * @param lectureAccount - name of the bitshares lecture account\n     * @return return map of stats by tokens UTSchoolTokenTicket, UTSchoolTokenSession, UTSchoolTokenGrade\n     * stat: {\n     *      id - id of the token,\n     *      symbol - name of the token\n     *      accepted - use was accepted to lecture\n     *      balance - balance of the particular token on the account\n     * }\n     */\n    getLectureStats(lectureAccount){\n        return new Promise((resolve, reject) => {\n            Promise.all([\n                FetchChain(\"getAccount\", lectureAccount),\n                FetchChain(\"getAccount\", this.account.name),\n                FetchChain(\"getAsset\", [utSchoolTokenTicket, utSchoolTokenSession, utSchoolTokenGrade])\n            ]).then((res)=> {\n                let [lectureAccount, studentAccount, assets] = res;\n                let lectureAccountId = lectureAccount.get('id');\n                let studentAccountId = studentAccount.get('id');\n\n                let assetsMap = {};\n                for(let asset of assets)\n                    assetsMap[asset.get('id')] = {\n                        'id': asset.get('id'),\n                        'symbol': asset.get('symbol'),\n                        'accepted': false,\n                        'balance': ChainStore.getAccountBalance(lectureAccount, asset.get('id'))\n                    };\n\n                BitsharesApiExtends.fetchHistory(lectureAccountId, 100, 'transfer').then((operations)=>{\n                    for(let operation of operations){\n                        let transferData=operation.op[1];\n                        if(transferData.from == lectureAccountId\n                            && transferData.to == studentAccountId\n                            && assetsMap[transferData.amount.asset_id]){\n                            assetsMap[transferData.amount.asset_id].accepted = true;\n                        }\n                    }\n                    resolve(assetsMap);\n                }).catch(reject);\n            }).catch(reject);\n        });\n    }\n\n    /**\n     * @desc return all available lectures for current user\n     * @return list of lectures\n     * lecture: {\n     *      id - id of the bitshares lecture account\n     *      name - name of the bitshares lecture account\n     *      teacher: {\n     *          id - id of the bitshares teacher account\n     *          name - id of the bitshares teacher account\n     *      }\n     *      stats - result from getLectureStats\n     * }\n     */\n    getLectures(){\n        let lecturesList = [];\n        return new Promise( (resolve, reject) => {\n            Promise.all([\n                FetchChain(\"getAccount\", utSchoolAccount),\n                FetchChain(\"getAsset\", utSchoolToken)\n            ]).then((res)=> {\n                let [utSchoolAccount, utSchoolAsset] = res;\n                utSchoolAccount = utSchoolAccount.get('id');\n                utSchoolAsset = utSchoolAsset.get('id');\n                BitsharesApiExtends.fetchHistory(utSchoolAccount, 100, 'transfer').then((operations)=>{\n                    let lecturesAccountsList = [];\n                    for(let operation of operations){\n                        let transferData=operation.op[1];\n\n                        if(transferData.from == utSchoolAccount\n                            && transferData.amount.asset_id == utSchoolAsset){\n                            lecturesAccountsList.push(transferData.to);\n                        }\n                    }\n\n                    if(lecturesAccountsList.length == 0) {\n                        resolve(lecturesList);\n                        return;\n                    }\n\n                    FetchChain(\"getAccount\", lecturesAccountsList).then((lectures)=>{\n                        lectures = lectures.toJS();\n                        let teachersIds = [];\n                        for(let lectureData of lectures){\n                            lecturesList.push({\n                                'id': lectureData.id,\n                                'name': lectureData.name,\n                                'teacher': {\n                                    'id': lectureData.active.account_auths[0][0]\n                                }\n                            });\n\n                            teachersIds.push(lectureData.active.account_auths[0][0]);\n                        }\n\n                        FetchChain(\"getAccount\", teachersIds).then((teachers)=>{\n                            let teachersMap = {};\n                            teachers = teachers.toJS();\n                            for(let teacher of teachers)\n                                teachersMap[teacher.id] = teacher;\n\n                            let lectureStatePromiseList = [];\n                            for(let lecture of lecturesList) {\n                                lecture.teacher.name = teachersMap[lecture.teacher.id].name;\n                                lectureStatePromiseList.push(this.getLectureStats(lecture.name));\n                            }\n\n                            Promise.all(lectureStatePromiseList).then((lecturesStates)=>{\n                                for(let i=0;i<lecturesList.length;i++)\n                                    lecturesList[i].stats = lecturesStates[i];\n\n                                resolve(lecturesList);\n                            }).catch(reject);\n                        }).catch(reject);\n                    }).catch(reject);\n                }).catch(reject);\n            }).catch(reject);\n        });\n    }\n\n\n}\n\nexport {StudentApi}","/**\n * Created by superpchelka on 23.02.18.\n */\nimport {FetchChain, TransactionBuilder} from \"bitsharesjs\";\nimport {BitsharesApiExtends} from './BitsharesApiExtends'\nimport {utSchoolToken, utSchoolTokenTicket, utSchoolTokenSession, utSchoolTokenGrade, utSchoolAccount} from '../common/Configs'\n\n\nclass TeacherApi{\n\n    constructor(account){\n        this.account=account;\n        this.feeAsset='BTS';\n    }\n\n    /**\n     * @desc send education token from lecture account to particular student\n     * @param lectureAccount - name of the bitshares lecture account\n     * @param studentAccount - name of the bitshares student account\n     * @param educationToken - name of the bitshares education token\n     * @return serialized transaction\n     */\n    _sendToken(lectureAccount, studentAccount, educationToken){\n        return new Promise((resolve, reject)=>{\n            Promise.all([\n                FetchChain(\"getAccount\", lectureAccount),\n                FetchChain(\"getAccount\", studentAccount),\n                FetchChain(\"getAsset\", educationToken),\n                FetchChain(\"getAsset\", this.feeAsset)\n            ]).then((res)=> {\n                let [lectureAccount, studentAccount, sendAsset, feeAsset] = res;\n                let tr = new TransactionBuilder();\n\n                tr.add_type_operation(\"transfer\", {\n                    fee: {\n                        amount: 0,\n                        asset_id: feeAsset.get(\"id\")\n                    },\n                    from: lectureAccount.get(\"id\"),\n                    to: studentAccount.get(\"id\"),\n                    amount: { asset_id: sendAsset.get(\"id\"), amount: 1},\n                } );\n\n                tr.set_required_fees().then(() => {\n                    tr.add_signer(this.account.privateKey, this.account.privateKey.toPublicKey().toPublicKeyString());\n                    tr.broadcast().catch(reject);\n                    resolve(tr.serialize());\n                }).catch(reject);\n            }).catch(reject);\n        })\n    }\n\n    /**\n     * @desc send session token from lecture account to particular student\n     * @param lectureAccount - name of the bitshares lecture account\n     * @param studentAccount - name of the bitshares student account\n     * @return serialized transaction\n     */\n    sendSessionToken(lectureAccount, studentAccount){\n        return this._sendToken(lectureAccount, studentAccount, utSchoolTokenSession);\n    }\n\n    /**\n     * @desc send grade token from lecture account to particular student\n     * @param lectureAccount - name of the bitshares lecture account\n     * @param studentAccount - name of the bitshares student account\n     * @return serialized transaction\n     */\n    sendGradeToken(lectureAccount, studentAccount){\n        return this._sendToken(lectureAccount, studentAccount, utSchoolTokenGrade);\n    }\n\n\n    /**\n     * @desc request teacher role for current bitshares account\n     * @return serialized proposal transaction\n     */\n    requestTeacherRole(){\n        return new Promise((resolve, reject)=>{\n            Promise.all([\n                FetchChain(\"getAccount\", utSchoolAccount),\n                FetchChain(\"getAccount\", this.account.name),\n                FetchChain(\"getAsset\", utSchoolToken),\n                FetchChain(\"getAsset\", this.feeAsset)\n            ]).then((res)=> {\n                let [utSchoolAccount, teacherAccount, sendAsset, feeAsset] = res;\n                let tr = new TransactionBuilder();\n\n                tr.add_type_operation(\"transfer\", {\n                    fee: {\n                        amount: 0,\n                        asset_id: feeAsset.get(\"id\")\n                    },\n                    from: utSchoolAccount.get(\"id\"),\n                    to: teacherAccount.get(\"id\"),\n                    amount: { asset_id: sendAsset.get(\"id\"), amount: 1},\n                } );\n\n                tr.propose({\n                    fee_paying_account: teacherAccount.get(\"id\")\n                });\n\n                tr.set_required_fees().then(() => {\n                    tr.add_signer(this.account.privateKey, this.account.privateKey.toPublicKey().toPublicKeyString());\n                    tr.broadcast().catch(reject);\n                    resolve(tr.serialize());\n                }).catch(reject);\n            }).catch(reject);\n        })\n    }\n\n    /**\n     * @desc fetch from blockchain information about participants of the lecture\n     * @param lectureAccount - name of the bitshares lecture account\n     * @return list of participants\n     * participant: {\n     *      id,\n     *      name\n     * }\n     */\n    getLectureParticipants(lectureAccount){\n        return new Promise( (resolve, reject) => {\n            Promise.all([\n                FetchChain(\"getAccount\", lectureAccount),\n                FetchChain(\"getAsset\", utSchoolTokenTicket)\n            ]).then((res)=> {\n                let [lectureAccount, ticketAsset] = res;\n                lectureAccount = lectureAccount.get('id');\n                ticketAsset = ticketAsset.get('id');\n\n\n                BitsharesApiExtends.fetchHistory(lectureAccount, 100, 'transfer').then((operations)=>{\n                    let lectureParticipantsIds = [];\n                    for(let operation of operations){\n                        let transferData=operation.op[1];\n                        if(transferData.from == lectureAccount\n                            && transferData.amount.asset_id == ticketAsset){\n                            lectureParticipantsIds.push(transferData.to);\n                        }\n                    }\n\n\n                    FetchChain('getAccount', lectureParticipantsIds).then((accounts)=>{\n                        accounts = accounts.toJS();\n                        let accountsMap = {};\n\n                        for(let account of accounts)\n                            if(account)\n                                accountsMap[account.id] = account;\n\n                        let lectureParticipants = [];\n                        for(let participant of lectureParticipantsIds){\n                            let accountData = accountsMap[participant];\n                            lectureParticipants.push({\n                                'id': accountData.id,\n                                'name': accountData.name\n                            });\n                        }\n\n                        resolve(lectureParticipants);\n                    }).catch(reject);\n                }).catch(reject);\n            }).catch(reject);\n        });\n    }\n\n    /**\n     * @desc fetch from blockchain information about applications for the lecture\n     * @param lectureAccount - name of the bitshares lecture account\n     * @return list of applications\n     * application: {\n     *      id, - id of proposal\n     *      account: { - information about student account requested application\n     *          id,\n     *          name\n     *      }\n     * }\n     */\n    getLectureApplications(lectureAccount){\n        return new Promise( (resolve, reject) => {\n            Promise.all([\n                FetchChain(\"getAccount\", lectureAccount),\n                FetchChain(\"getAsset\", utSchoolTokenTicket)\n            ]).then((res)=> {\n                let [lectureAccount, ticketAsset] = res;\n                let lectureAccountId = lectureAccount.get('id');\n                ticketAsset = ticketAsset.get('id');\n\n                let proposals = lectureAccount.toJS().proposals;\n                if(proposals.length == 0){\n                    resolve([]);\n                    return;\n                }\n\n                let applications = [];\n                FetchChain(\"getObject\", proposals).then((proposals)=>{\n                    proposals = proposals.toJS();\n\n                    let accountIds = [];\n                    for(let proposal of proposals){\n                        if(Date.parse(proposal.proposed_transaction.expiration) < new Date()/1000)\n                            continue;\n                        let operations = proposal.proposed_transaction.operations;\n                        let acceptedOperation;\n                        for(let operation of operations){\n                            let operationData = operation[1];\n                            if(operationData.amount.asset_id == ticketAsset\n                                && operationData.from == lectureAccountId\n                            ) {\n                                acceptedOperation = operationData;\n                                break;\n                            }\n                        }\n\n                        if(!acceptedOperation)\n                            continue;\n\n                        accountIds.push(acceptedOperation.to);\n                        applications.push({\n                            'id': proposal.id,\n                            'operation': acceptedOperation\n                        });\n                    }\n\n                    if(applications.length == 0){\n                        resolve([]);\n                        return;\n                    }\n                    FetchChain('getAccount', accountIds).then((accounts)=>{\n                        accounts = accounts.toJS();\n                        let accountsMap = {};\n\n                        for(let account of accounts)\n                            if(account)\n                                accountsMap[account.id] = account;\n\n                        for(let application of applications){\n                            let accountData = accountsMap[application.operation.to];\n                            delete application.operation;\n                            application.account = {\n                                'id': accountData.id,\n                                'name': accountData.name\n                            };\n                        }\n\n                        resolve(applications);\n                    }).catch(reject);\n                }).catch(reject);\n            }).catch(reject);\n        });\n    }\n\n    /**\n     * @desc accept proposal for application for the lecture\n     * @param lectureApplicationId - id of the proposal for application for the lecture\n     * @return serialized transaction\n     */\n    acceptApplication(lectureApplicationId){\n        return new Promise((resolve, reject)=>{\n            Promise.all([\n                FetchChain(\"getAccount\", this.account.name),\n                FetchChain(\"getAsset\", this.feeAsset)\n            ]).then((res)=> {\n                let [teacherAccount, feeAsset] = res;\n                let tr = new TransactionBuilder();\n                teacherAccount = teacherAccount.get('id');\n\n                tr.add_type_operation(\"proposal_update\", {\n                    fee: {\n                        amount: 0,\n                        asset_id: feeAsset.get(\"id\")\n                    },\n                    fee_paying_account: teacherAccount,\n                    proposal: lectureApplicationId,\n                    active_approvals_to_add: [teacherAccount],\n                } );\n\n                tr.set_required_fees().then(() => {\n                    tr.add_signer(this.account.privateKey, this.account.privateKey.toPublicKey().toPublicKeyString());\n                    tr.broadcast().catch(reject);\n                    resolve(tr.serialize());\n                }).catch(reject);\n            }).catch(reject);\n        })\n    }\n\n    /**\n     * @desc return statistics about particular lecture\n     * @param lectureAccount - name of the bitshares lecture accout\n     * @return pair of results from getLectureParticipants and getLectureApplications\n     */\n    getLectureStats(lectureAccount){\n        return Promise.all([\n            this.getLectureParticipants(lectureAccount),\n            this.getLectureApplications(lectureAccount)\n        ])\n    }\n\n    /**\n     * @desc internal method for iterating through lectures and gathering stats\n     * @param lectures - list of account objects fetched from blockchain with bitsharesjs\n     * @param index - current index in list\n     * @param onFinish - finish callback\n     * @private\n     */\n    __processLectureQueue(lectures, index, onFinish){\n        if(index>=lectures.length) {\n            onFinish(lectures);\n            return;\n        }\n        this.getLectureStats(lectures[index].name).then((res)=>{\n            let [participants, applications] = res;\n            lectures[index].participants = participants;\n            lectures[index].applications = applications;\n\n            this.__processLectureQueue(lectures, index+1, onFinish);\n        })\n    }\n\n    /**\n     * @desc collect all lectures of the current user\n     * @return list of lectures\n     * lecture: {\n     *      id,\n     *      name,\n     *      participants - result of getLectureParticipants\n     *      applications - result of getLectureApplications\n     * }\n     */\n    getLectures(){\n        return new Promise( (resolve, reject) => {\n            Promise.all([\n                FetchChain(\"getAccount\", utSchoolAccount),\n                FetchChain(\"getAccount\", this.account.name),\n                FetchChain(\"getAsset\", utSchoolToken)\n            ]).then((res)=> {\n                let [utSchoolAccount, teacherAccount, utSchoolAsset] = res;\n                utSchoolAccount = utSchoolAccount.get('id');\n                teacherAccount = teacherAccount.get('id');\n                utSchoolAsset = utSchoolAsset.get('id');\n\n\n                BitsharesApiExtends.fetchHistory(utSchoolAccount, 100, 'transfer').then((operations)=>{\n                    let lecturesIdsList = [];\n                    for(let operation of operations){\n                        let transferData=operation.op[1];\n                        if(transferData.from == utSchoolAccount\n                            && transferData.amount.asset_id == utSchoolAsset)\n                            lecturesIdsList.push(transferData.to);\n                    }\n\n                    if(lecturesIdsList.length == 0){\n                        resolve([]);\n                        return;\n                    }\n\n                    FetchChain(\"getAccount\", lecturesIdsList).then((lectures)=>{\n                        lectures = lectures.toJS();\n\n                        let teachersLecturesList = [];\n\n                        for(let lecture of lectures)  {\n                            let currentTeacherId = lecture.active.account_auths[0][0];\n                            if(currentTeacherId == teacherAccount) {\n                                teachersLecturesList.push({\n                                    'id': lecture.id,\n                                    'name': lecture.name\n                                });\n                            }\n                        }\n\n                        if(teachersLecturesList.length == 0){\n                            resolve([]);\n                            return;\n                        }\n\n\n                        this.__processLectureQueue(teachersLecturesList, 0, resolve)\n                    }).catch(reject)\n\n                }).catch(reject);\n            }).catch(reject);\n        });\n    }\n\n\n\n\n\n}\n\nexport {TeacherApi}","/**\n * Created by superpchelka on 24.02.18.\n */\n\nimport StudentApi from './StudentApi';\nimport TeacherApi from './TeacherApi';\nimport {Api as SchoolApi} from '../api/Api';\n\nclass Api{\n\n    static patch(program, nodeUrl, login, password, privateKey){\n        if(!privateKey)\n            privateKey = Api.generateKeys(login, password).pubKeys.active;\n\n        Api.__addCommands(program);\n        StudentApi.patch(program);\n        TeacherApi.patch(program);\n\n        return Api.init(nodeUrl, login, privateKey).then((api)=>{\n            Api.schoolApi = api;\n        });\n    }\n\n    static __addCommands(program){\n        program\n            .command('setPrivateKey')\n            .option('-p, --privateKey', 'private key')\n            .action((_, options)=>Api.schoolApi.setPrivateKey(...options));\n\n        program\n            .command('register')\n            .option('-l, --login', 'name of the new bitshares account')\n            .option('-p, --password', 'password for generating bitshares keys')\n            .action((_, options)=>Api.schoolApi.setPrivateKey(...options));\n\n        program\n            .command('register')\n            .option('-l, --login', 'name of the new bitshares account')\n            .option('-p, --password', 'password for generating bitshares keys')\n            .action((_, options)=>Api.schoolApi.setPrivateKey(...options));\n\n    }\n\n}\n\nexport default Api;","/**\n * Created by superpchelka on 24.02.18.\n */\n\nclass StudentApi{\n\n    static patch(program){\n\n    }\n\n}\n\nexport default StudentApi;","/**\n * Created by superpchelka on 24.02.18.\n */\n\n\nclass TeacherApi{\n\n    static patch(program){\n\n    }\n\n}\n\nexport default TeacherApi;","/**\n * Created by superpchelka on 23.02.18.\n */\n\nimport {PrivateKey} from \"bitsharesjs\";\n\nclass Account{\n\n    constructor(account, privateKey){\n        this.name=account;\n        this.privateKey=privateKey?PrivateKey.fromWif(privateKey):'';\n    }\n\n}\n\nexport {Account}","/**\n * Created by superpchelka on 23.02.18.\n */\n\nlet utSchoolToken = 'UTSCHOOL';\nlet utSchoolTokenTicket = utSchoolToken+'.TICKET';\nlet utSchoolTokenSession = utSchoolToken+'.SESSION';\nlet utSchoolTokenGrade = utSchoolToken+'.GRADE';\n\nlet utSchoolAccount='ut-school';\nlet utSchoolFaucet='u-tech-faucet';\n\n\n\n\nexport {utSchoolToken, utSchoolTokenTicket, utSchoolTokenSession, utSchoolTokenGrade, utSchoolAccount, utSchoolFaucet}",null]}