{"version":3,"sources":["obfuscator/beginning.js","main.js","api/Api.js","api/BitsharesApiExtends.js","api/BlockchainApi.js","api/StudentApi.js","api/TeacherApi.js","common/Account.js","common/Configs.js","obfuscator/end.js"],"names":["native_require","this_module","require","p","root","path","resolve","test","basename","module","cache","err","Error","message","stack","exports","call","relative","pathWithSlash","slice","paths","i","register","fn","parent","split","segs","pop","seg","push","join","_Api","_Account","_StudentApi","_TeacherApi","_BlockchainApi","_bitsharesjs","_Configs","Api","accountName","privateKey","_classCallCheck","this","account","Account","studentApi","StudentApi","teacherApi","TeacherApi","nodeUrl","api","Promise","resolved","rejected","BlockchainApi","init","then","catch","login","password","Login","generateKeys","ChainValidation","required","utSchoolFaucet","keys","reject","all","FetchChain","res","chain_registrar","_slicedToArray","tr","TransactionBuilder","add_type_operation","fee","amount","asset_id","registrar","get","referrer","name","owner","weight_threshold","account_auths","key_auths","pubKeys","address_auths","active","options","memo_key","memo","voting_account","num_witness","num_committee","votes","set_required_fees","console","log","serialize","broadcast","_bitsharesjsWs","object_type","op_history","parseInt","operation_history","BitsharesApiExtends","limit","arguments","length","undefined","opType","stop","_this","start","operationsList","Apis","instance","history_api","exec","operations","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","operation","value","op","return","_fetchHistory","id","opTypeName","account_id","is_object_id","toJS","ChainStore","objects_by_id","opTypeId","ChainTypes","init_promise","update_head_block","network_name","_BitsharesApiExtends","feeAsset","lectureAccount","utSchoolTokenTicket","_res","studentAccount","sendAsset","from","to","propose","fee_paying_account","add_signer","toPublicKey","toPublicKeyString","_this2","utSchoolTokenSession","utSchoolTokenGrade","_res2","assets","lectureAccountId","studentAccountId","assetsMap","asset","symbol","accepted","balance","getAccountBalance","fetchHistory","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","transferData","_this3","lecturesList","utSchoolAccount","utSchoolToken","_res3","utSchoolAsset","lecturesAccountsList","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","lectures","teachersIds","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","lectureData","teacher","teachers","teachersMap","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","lectureStatePromiseList","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","lecture","getLectureStats","lecturesStates","stats","educationToken","_sendToken","teacherAccount","ticketAsset","lectureParticipantsIds","accounts","accountsMap","lectureParticipants","accountData","_res4","proposals","applications","accountIds","proposal","Date","parse","proposed_transaction","expiration","acceptedOperation","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","operationData","application","lectureApplicationId","_res5","active_approvals_to_add","getLectureParticipants","getLectureApplications","index","onFinish","_this4","_res6","participants","__processLectureQueue","_this5","_res7","lecturesIdsList","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","teachersLecturesList","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","PrivateKey","fromWif"],"mappings":"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","file":"app.min.js","sourcesContent":[null,"/**\n * Created by superpchelka on 22.02.18.\n */\n\n\nimport {Api} from './api/Api.js'\n\nexport default Api;\n","/**\n * Created by superpchelka on 23.02.18.\n */\n\nimport {Account} from '../common/Account'\nimport {StudentApi} from \"./StudentApi\";\nimport {TeacherApi} from \"./TeacherApi\";\nimport {BlockchainApi} from \"./BlockchainApi\"\nimport {FetchChain, TransactionBuilder, ChainValidation, Login} from \"bitsharesjs\";\nimport {utSchoolFaucet} from \"../common/Configs\"\n\n\nclass Api{\n\n\n    static init(nodeUrl, accountName, privateKey){\n        let api = new Api(accountName, privateKey);\n        return new Promise((resolved, rejected)=>{\n            BlockchainApi.init(nodeUrl).then(()=>resolved(api)).catch(rejected);\n        });\n    }\n\n    constructor(accountName, privateKey){\n        this.account = new Account(accountName, privateKey);\n        this.studentApi=new StudentApi(this.account);\n        this.teacherApi=new TeacherApi(this.account);\n    }\n\n    generateKeys(login, password){\n       return Login.generateKeys(login, password)\n    }\n\n\n    /**\n     * @desc register user by login, password\n     * @param login - name of the new bitshares account\n     * @param password\n     * @return serialized transaction\n     */\n    register(\n        login,\n        password,\n    ) {\n\n        ChainValidation.required(utSchoolFaucet, \"registrar_id\");\n\n        let keys = this.generateKeys(login, password);\n\n        return new Promise((resolve, reject) => {\n            return Promise.all([\n                FetchChain(\"getAccount\", utSchoolFaucet),\n            ]).then((res)=> {\n                let [ chain_registrar ] = res;\n\n                let tr = new TransactionBuilder();\n                tr.add_type_operation(\"account_create\", {\n                    fee: {\n                        amount: 0,\n                        asset_id: 0\n                    },\n                    \"registrar\": chain_registrar.get(\"id\"),\n                    \"referrer\": chain_registrar.get(\"id\"),\n                    \"name\": login,\n                    \"owner\": {\n                        \"weight_threshold\": 1,\n                        \"account_auths\": [],\n                        \"key_auths\": [[ keys.pubKeys.owner, 1 ]],\n                        \"address_auths\": []\n                    },\n                    \"active\": {\n                        \"weight_threshold\": 1,\n                        \"account_auths\": [ ],\n                        \"key_auths\": [[ keys.pubKeys.active, 1 ]],\n                        \"address_auths\": []\n                    },\n                    \"options\": {\n                        \"memo_key\": keys.pubKeys.memo,\n                        \"voting_account\": \"1.2.5\",\n                        \"num_witness\": 0,\n                        \"num_committee\": 0,\n                        \"votes\": [ ]\n                    }\n                });\n                tr.set_required_fees().then(() => {\n                    console.log(\"serialized transaction:\", tr.serialize());\n                    tr.broadcast();\n                    resolve(tr.serialize());\n                });\n            });\n        });\n    }\n}\n\nexport {Api}","/**\n * Created by superpchelka on 23.02.18.\n */\n\nimport {Apis} from \"bitsharesjs-ws\";\nimport {ChainValidation} from \"bitsharesjs\";\nimport {ChainTypes, ChainStore} from \"bitsharesjs\";\nconst {object_type} = ChainTypes;\nlet op_history   = parseInt(object_type.operation_history, 10);\n\n\nclass BitsharesApiExtends{\n\n\n    /**\n     * @desc internal method for iterating through all operations history\n     * @param account - id of the bitshares account\n     * @param limit - results per butch (max 100)\n     * @param opType - operation type id for filtering\n     * @param stop - recent operation id\n     * @param start - first operation id\n     * @param operationsList - list of already fetched operations\n     * @return list of operations like FetchRecentHistory from bitsharesjs\n     * @private\n     */\n    static _fetchHistory(account, limit = 100, opType, stop, start, operationsList){\n        if(typeof stop === 'undefined')\n            stop = \"1.\" + op_history + \".0\";\n        if(typeof start === 'undefined')\n            start = \"1.\" + op_history + \".0\";\n\n        return new Promise( (resolve, reject) => {\n            Apis.instance().history_api().exec(\"get_account_history\",\n                [ account.get(\"id\"), stop, limit, start])\n                .then( operations => {\n                    for(let operation of operations) {\n                        if (operation.op[0] == opType || typeof opType == 'undefined')\n                            operationsList.push(operation);\n                    }\n\n                    if(operations.length == limit)\n                        this._fetchHistory(account, limit, opType, undefined, operations[0].id, operationsList).then(resolve, reject);\n                    else\n                        resolve(operationsList);\n                });\n        });\n    }\n\n    /**\n     * @desc collect all history of the account\n     * @param account - id of the bitshares account\n     * @param limit - results per butch (max 100)\n     * @param opTypeName - operation type for filtering\n     * @param stop - recent operation id\n     * @param start - first operation id\n     * @return list of operations like FetchRecentHistory from bitsharesjs\n     */\n    static fetchHistory(account, limit = 100, opTypeName, stop, start)\n    {\n        // console.log( \"get account history: \", account )\n        /// TODO: make sure we do not submit a query if there is already one\n        /// in flight...\n        let account_id = account;\n        if( !ChainValidation.is_object_id(account_id) && account.toJS )\n            account_id = account.get(\"id\");\n\n        if( !ChainValidation.is_object_id(account_id)  )\n            return;\n\n        account = ChainStore.objects_by_id.get(account_id);\n        if( !account ) return;\n\n        let opTypeId = ChainTypes.operations[opTypeName];\n        if (typeof opTypeName != 'undefined' && opTypeId === undefined)\n            throw new Error(`unknown operation: ${opTypeName}`);\n\n        return this._fetchHistory(account, limit, opTypeId, stop, start, []);\n    }\n\n\n}\n\nexport {BitsharesApiExtends}","/**\n * Created by superpchelka on 23.02.18.\n */\n\nimport {TransactionBuilder, ChainStore} from \"bitsharesjs\";\nimport {Apis} from \"bitsharesjs-ws\";\n\nclass BlockchainApi{\n\n    static init(nodeUrl){\n        return new Promise((resolved, rejected) => {\n            Apis.instance(nodeUrl, true)\n                .init_promise.then((res) => {\n                Promise.all([\n                    new TransactionBuilder().update_head_block(),\n                    ChainStore.init()\n                ]).then(()=>{\n                    console.log(\"connected to:\", res[0].network_name, \"network\");\n                    resolved();\n                }).catch(rejected);\n            }).catch(rejected);\n        });\n    }\n}\n\nexport {BlockchainApi}","/**\n * Created by superpchelka on 23.02.18.\n */\nimport {ChainStore, FetchChain, TransactionBuilder} from \"bitsharesjs\";\nimport {BitsharesApiExtends} from './BitsharesApiExtends'\nimport {utSchoolTokenTicket, utSchoolTokenSession, utSchoolTokenGrade, utSchoolToken, utSchoolAccount} from '../common/Configs'\n\n\n\nclass StudentApi{\n\n    constructor(account){\n        this.account=account;\n        this.feeAsset='BTS';\n    }\n\n    /**\n     * @desc apply current user for the lecture\n     * @param lectureAccount - name of the bitshares lecture account\n     * @return serialized transaction\n     */\n    applyForLecture(lectureAccount){\n        return new Promise((resolve, reject) => {\n            Promise.all([\n                FetchChain(\"getAccount\", lectureAccount),\n                FetchChain(\"getAccount\", this.account.name),\n                FetchChain(\"getAsset\", utSchoolTokenTicket),\n                FetchChain(\"getAsset\", this.feeAsset)\n            ]).then((res)=> {\n                let [lectureAccount, studentAccount, sendAsset, feeAsset] = res;\n                let tr = new TransactionBuilder();\n\n                tr.add_type_operation(\"transfer\", {\n                    fee: {\n                        amount: 0,\n                        asset_id: feeAsset.get(\"id\")\n                    },\n                    from: lectureAccount.get(\"id\"),\n                    to: studentAccount.get(\"id\"),\n                    amount: { asset_id: sendAsset.get(\"id\"), amount: 1},\n                } );\n\n                tr.propose({\n                    fee_paying_account: studentAccount.get(\"id\"),\n                });\n\n                tr.set_required_fees().then(() => {\n                    tr.add_signer(this.account.privateKey, this.account.privateKey.toPublicKey().toPublicKeyString());\n                    tr.broadcast().catch(reject);\n                    resolve(tr.serialize());\n                }).catch(reject);\n            }).catch(reject);\n        });\n    }\n\n    /**\n     * @desc collect information about lecture\n     * @param lectureAccount - name of the bitshares lecture account\n     * @return return map of stats by tokens UTSchoolTokenTicket, UTSchoolTokenSession, UTSchoolTokenGrade\n     * stat: {\n     *      id - id of the token,\n     *      symbol - name of the token\n     *      accepted - use was accepted to lecture\n     *      balance - balance of the particular token on the account\n     * }\n     */\n    getLectureStats(lectureAccount){\n        return new Promise((resolve, reject) => {\n            Promise.all([\n                FetchChain(\"getAccount\", lectureAccount),\n                FetchChain(\"getAccount\", this.account.name),\n                FetchChain(\"getAsset\", [utSchoolTokenTicket, utSchoolTokenSession, utSchoolTokenGrade])\n            ]).then((res)=> {\n                let [lectureAccount, studentAccount, assets] = res;\n                let lectureAccountId = lectureAccount.get('id');\n                let studentAccountId = studentAccount.get('id');\n\n                let assetsMap = {};\n                for(let asset of assets)\n                    assetsMap[asset.get('id')] = {\n                        'id': asset.get('id'),\n                        'symbol': asset.get('symbol'),\n                        'accepted': false,\n                        'balance': ChainStore.getAccountBalance(lectureAccount, asset.get('id'))\n                    };\n\n                BitsharesApiExtends.fetchHistory(lectureAccountId, 100, 'transfer').then((operations)=>{\n                    for(let operation of operations){\n                        let transferData=operation.op[1];\n                        if(transferData.from == lectureAccountId\n                            && transferData.to == studentAccountId\n                            && assetsMap[transferData.amount.asset_id]){\n                            assetsMap[transferData.amount.asset_id].accepted = true;\n                        }\n                    }\n                    resolve(assetsMap);\n                }).catch(reject);\n            }).catch(reject);\n        });\n    }\n\n    /**\n     * @desc return all available lectures for current user\n     * @return list of lectures\n     * lecture: {\n     *      id - id of the bitshares lecture account\n     *      name - name of the bitshares lecture account\n     *      teacher: {\n     *          id - id of the bitshares teacher account\n     *          name - id of the bitshares teacher account\n     *      }\n     *      stats - result from getLectureStats\n     * }\n     */\n    getLectures(){\n        let lecturesList = [];\n        return new Promise( (resolve, reject) => {\n            Promise.all([\n                FetchChain(\"getAccount\", utSchoolAccount),\n                FetchChain(\"getAsset\", utSchoolToken)\n            ]).then((res)=> {\n                let [utSchoolAccount, utSchoolAsset] = res;\n                utSchoolAccount = utSchoolAccount.get('id');\n                utSchoolAsset = utSchoolAsset.get('id');\n                BitsharesApiExtends.fetchHistory(utSchoolAccount, 100, 'transfer').then((operations)=>{\n                    let lecturesAccountsList = [];\n                    for(let operation of operations){\n                        let transferData=operation.op[1];\n\n                        if(transferData.from == utSchoolAccount\n                            && transferData.amount.asset_id == utSchoolAsset){\n                            lecturesAccountsList.push(transferData.to);\n                        }\n                    }\n\n                    if(lecturesAccountsList.length == 0) {\n                        resolve(lecturesList);\n                        return;\n                    }\n\n                    FetchChain(\"getAccount\", lecturesAccountsList).then((lectures)=>{\n                        lectures = lectures.toJS();\n                        let teachersIds = [];\n                        for(let lectureData of lectures){\n                            lecturesList.push({\n                                'id': lectureData.id,\n                                'name': lectureData.name,\n                                'teacher': {\n                                    'id': lectureData.active.account_auths[0][0]\n                                }\n                            });\n\n                            teachersIds.push(lectureData.active.account_auths[0][0]);\n                        }\n\n                        FetchChain(\"getAccount\", teachersIds).then((teachers)=>{\n                            let teachersMap = {};\n                            teachers = teachers.toJS();\n                            for(let teacher of teachers)\n                                teachersMap[teacher.id] = teacher;\n\n                            let lectureStatePromiseList = [];\n                            for(let lecture of lecturesList) {\n                                lecture.teacher.name = teachersMap[lecture.teacher.id].name;\n                                lectureStatePromiseList.push(this.getLectureStats(lecture.name));\n                            }\n\n                            Promise.all(lectureStatePromiseList).then((lecturesStates)=>{\n                                for(let i=0;i<lecturesList.length;i++)\n                                    lecturesList[i].stats = lecturesStates[i];\n\n                                resolve(lecturesList);\n                            }).catch(reject);\n                        }).catch(reject);\n                    }).catch(reject);\n                }).catch(reject);\n            }).catch(reject);\n        });\n    }\n\n\n}\n\nexport {StudentApi}","/**\n * Created by superpchelka on 23.02.18.\n */\nimport {FetchChain, TransactionBuilder} from \"bitsharesjs\";\nimport {BitsharesApiExtends} from './BitsharesApiExtends'\nimport {utSchoolToken, utSchoolTokenTicket, utSchoolTokenSession, utSchoolTokenGrade, utSchoolAccount} from '../common/Configs'\n\n\nclass TeacherApi{\n\n    constructor(account){\n        this.account=account;\n        this.feeAsset='BTS';\n    }\n\n    /**\n     * @desc send education token from lecture account to particular student\n     * @param lectureAccount - name of the bitshares lecture account\n     * @param studentAccount - name of the bitshares student account\n     * @param educationToken - name of the bitshares education token\n     * @return serialized transaction\n     */\n    _sendToken(lectureAccount, studentAccount, educationToken){\n        return new Promise((resolve, reject)=>{\n            Promise.all([\n                FetchChain(\"getAccount\", lectureAccount),\n                FetchChain(\"getAccount\", studentAccount),\n                FetchChain(\"getAsset\", educationToken),\n                FetchChain(\"getAsset\", this.feeAsset)\n            ]).then((res)=> {\n                let [lectureAccount, studentAccount, sendAsset, feeAsset] = res;\n                let tr = new TransactionBuilder();\n\n                tr.add_type_operation(\"transfer\", {\n                    fee: {\n                        amount: 0,\n                        asset_id: feeAsset.get(\"id\")\n                    },\n                    from: lectureAccount.get(\"id\"),\n                    to: studentAccount.get(\"id\"),\n                    amount: { asset_id: sendAsset.get(\"id\"), amount: 1},\n                } );\n\n                tr.set_required_fees().then(() => {\n                    tr.add_signer(this.account.privateKey, this.account.privateKey.toPublicKey().toPublicKeyString());\n                    tr.broadcast().catch(reject);\n                    resolve(tr.serialize());\n                }).catch(reject);\n            }).catch(reject);\n        })\n    }\n\n    /**\n     * @desc send session token from lecture account to particular student\n     * @param lectureAccount - name of the bitshares lecture account\n     * @param studentAccount - name of the bitshares student account\n     * @return serialized transaction\n     */\n    sendSessionToken(lectureAccount, studentAccount){\n        return this._sendToken(lectureAccount, studentAccount, utSchoolTokenSession);\n    }\n\n    /**\n     * @desc send grade token from lecture account to particular student\n     * @param lectureAccount - name of the bitshares lecture account\n     * @param studentAccount - name of the bitshares student account\n     * @return serialized transaction\n     */\n    sendGradeToken(lectureAccount, studentAccount){\n        return this._sendToken(lectureAccount, studentAccount, utSchoolTokenGrade);\n    }\n\n\n    /**\n     * @desc request teacher role for current bitshares account\n     * @return serialized proposal transaction\n     */\n    requestTeacherRole(){\n        return new Promise((resolve, reject)=>{\n            Promise.all([\n                FetchChain(\"getAccount\", utSchoolAccount),\n                FetchChain(\"getAccount\", this.account.name),\n                FetchChain(\"getAsset\", utSchoolToken),\n                FetchChain(\"getAsset\", this.feeAsset)\n            ]).then((res)=> {\n                let [utSchoolAccount, teacherAccount, sendAsset, feeAsset] = res;\n                let tr = new TransactionBuilder();\n\n                tr.add_type_operation(\"transfer\", {\n                    fee: {\n                        amount: 0,\n                        asset_id: feeAsset.get(\"id\")\n                    },\n                    from: utSchoolAccount.get(\"id\"),\n                    to: teacherAccount.get(\"id\"),\n                    amount: { asset_id: sendAsset.get(\"id\"), amount: 1},\n                } );\n\n                tr.propose({\n                    fee_paying_account: teacherAccount.get(\"id\")\n                });\n\n                tr.set_required_fees().then(() => {\n                    tr.add_signer(this.account.privateKey, this.account.privateKey.toPublicKey().toPublicKeyString());\n                    tr.broadcast().catch(reject);\n                    resolve(tr.serialize());\n                }).catch(reject);\n            }).catch(reject);\n        })\n    }\n\n    /**\n     * @desc fetch from blockchain information about participants of the lecture\n     * @param lectureAccount - name of the bitshares lecture account\n     * @return list of participants\n     * participant: {\n     *      id,\n     *      name\n     * }\n     */\n    getLectureParticipants(lectureAccount){\n        return new Promise( (resolve, reject) => {\n            Promise.all([\n                FetchChain(\"getAccount\", lectureAccount),\n                FetchChain(\"getAsset\", utSchoolTokenTicket)\n            ]).then((res)=> {\n                let [lectureAccount, ticketAsset] = res;\n                lectureAccount = lectureAccount.get('id');\n                ticketAsset = ticketAsset.get('id');\n\n\n                BitsharesApiExtends.fetchHistory(lectureAccount, 100, 'transfer').then((operations)=>{\n                    let lectureParticipantsIds = [];\n                    for(let operation of operations){\n                        let transferData=operation.op[1];\n                        if(transferData.from == lectureAccount\n                            && transferData.amount.asset_id == ticketAsset){\n                            lectureParticipantsIds.push(transferData.to);\n                        }\n                    }\n\n\n                    FetchChain('getAccount', lectureParticipantsIds).then((accounts)=>{\n                        accounts = accounts.toJS();\n                        let accountsMap = {};\n\n                        for(let account of accounts)\n                            if(account)\n                                accountsMap[account.id] = account;\n\n                        let lectureParticipants = [];\n                        for(let participant of lectureParticipantsIds){\n                            let accountData = accountsMap[participant];\n                            lectureParticipants.push({\n                                'id': accountData.id,\n                                'name': accountData.name\n                            });\n                        }\n\n                        resolve(lectureParticipants);\n                    }).catch(reject);\n                }).catch(reject);\n            }).catch(reject);\n        });\n    }\n\n    /**\n     * @desc fetch from blockchain information about applications for the lecture\n     * @param lectureAccount - name of the bitshares lecture account\n     * @return list of applications\n     * application: {\n     *      id, - id of proposal\n     *      account: { - information about student account requested application\n     *          id,\n     *          name\n     *      }\n     * }\n     */\n    getLectureApplications(lectureAccount){\n        return new Promise( (resolve, reject) => {\n            Promise.all([\n                FetchChain(\"getAccount\", lectureAccount),\n                FetchChain(\"getAsset\", utSchoolTokenTicket)\n            ]).then((res)=> {\n                let [lectureAccount, ticketAsset] = res;\n                let lectureAccountId = lectureAccount.get('id');\n                ticketAsset = ticketAsset.get('id');\n\n                let proposals = lectureAccount.toJS().proposals;\n                if(proposals.length == 0){\n                    resolve([]);\n                    return;\n                }\n\n                let applications = [];\n                FetchChain(\"getObject\", proposals).then((proposals)=>{\n                    proposals = proposals.toJS();\n\n                    let accountIds = [];\n                    for(let proposal of proposals){\n                        if(Date.parse(proposal.proposed_transaction.expiration) < new Date()/1000)\n                            continue;\n                        let operations = proposal.proposed_transaction.operations;\n                        let acceptedOperation;\n                        for(let operation of operations){\n                            let operationData = operation[1];\n                            if(operationData.amount.asset_id == ticketAsset\n                                && operationData.from == lectureAccountId\n                            ) {\n                                acceptedOperation = operationData;\n                                break;\n                            }\n                        }\n\n                        if(!acceptedOperation)\n                            continue;\n\n                        accountIds.push(acceptedOperation.to);\n                        applications.push({\n                            'id': proposal.id,\n                            'operation': acceptedOperation\n                        });\n                    }\n\n                    if(applications.length == 0){\n                        resolve([]);\n                        return;\n                    }\n                    FetchChain('getAccount', accountIds).then((accounts)=>{\n                        accounts = accounts.toJS();\n                        let accountsMap = {};\n\n                        for(let account of accounts)\n                            if(account)\n                                accountsMap[account.id] = account;\n\n                        for(let application of applications){\n                            let accountData = accountsMap[application.operation.to];\n                            delete application.operation;\n                            application.account = {\n                                'id': accountData.id,\n                                'name': accountData.name\n                            };\n                        }\n\n                        resolve(applications);\n                    }).catch(reject);\n                }).catch(reject);\n            }).catch(reject);\n        });\n    }\n\n    /**\n     * @desc accept proposal for application for the lecture\n     * @param lectureApplicationId - id of the proposal for application for the lecture\n     * @return serialized transaction\n     */\n    acceptApplication(lectureApplicationId){\n        return new Promise((resolve, reject)=>{\n            Promise.all([\n                FetchChain(\"getAccount\", this.account.name),\n                FetchChain(\"getAsset\", this.feeAsset)\n            ]).then((res)=> {\n                let [teacherAccount, feeAsset] = res;\n                let tr = new TransactionBuilder();\n                teacherAccount = teacherAccount.get('id');\n\n                tr.add_type_operation(\"proposal_update\", {\n                    fee: {\n                        amount: 0,\n                        asset_id: feeAsset.get(\"id\")\n                    },\n                    fee_paying_account: teacherAccount,\n                    proposal: lectureApplicationId,\n                    active_approvals_to_add: [teacherAccount],\n                } );\n\n                tr.set_required_fees().then(() => {\n                    tr.add_signer(this.account.privateKey, this.account.privateKey.toPublicKey().toPublicKeyString());\n                    tr.broadcast().catch(reject);\n                    resolve(tr.serialize());\n                }).catch(reject);\n            }).catch(reject);\n        })\n    }\n\n    /**\n     * @desc return statistics about particular lecture\n     * @param lectureAccount - name of the bitshares lecture accout\n     * @return pair of results from getLectureParticipants and getLectureApplications\n     */\n    getLectureStats(lectureAccount){\n        return Promise.all([\n            this.getLectureParticipants(lectureAccount),\n            this.getLectureApplications(lectureAccount)\n        ])\n    }\n\n    /**\n     * @desc internal method for iterating through lectures and gathering stats\n     * @param lectures - list of account objects fetched from blockchain with bitsharesjs\n     * @param index - current index in list\n     * @param onFinish - finish callback\n     * @private\n     */\n    __processLectureQueue(lectures, index, onFinish){\n        if(index>=lectures.length) {\n            onFinish(lectures);\n            return;\n        }\n        this.getLectureStats(lectures[index].name).then((res)=>{\n            let [participants, applications] = res;\n            lectures[index].participants = participants;\n            lectures[index].applications = applications;\n\n            this.__processLectureQueue(lectures, index+1, onFinish);\n        })\n    }\n\n    /**\n     * @desc collect all lectures of the current user\n     * @return list of lectures\n     * lecture: {\n     *      id,\n     *      name,\n     *      participants - result of getLectureParticipants\n     *      applications - result of getLectureApplications\n     * }\n     */\n    getLectures(){\n        return new Promise( (resolve, reject) => {\n            Promise.all([\n                FetchChain(\"getAccount\", utSchoolAccount),\n                FetchChain(\"getAccount\", this.account.name),\n                FetchChain(\"getAsset\", utSchoolToken)\n            ]).then((res)=> {\n                let [utSchoolAccount, teacherAccount, utSchoolAsset] = res;\n                utSchoolAccount = utSchoolAccount.get('id');\n                teacherAccount = teacherAccount.get('id');\n                utSchoolAsset = utSchoolAsset.get('id');\n\n\n                BitsharesApiExtends.fetchHistory(utSchoolAccount, 100, 'transfer').then((operations)=>{\n                    let lecturesIdsList = [];\n                    for(let operation of operations){\n                        let transferData=operation.op[1];\n                        if(transferData.from == utSchoolAccount\n                            && transferData.amount.asset_id == utSchoolAsset)\n                            lecturesIdsList.push(transferData.to);\n                    }\n\n                    if(lecturesIdsList.length == 0){\n                        resolve([]);\n                        return;\n                    }\n\n                    FetchChain(\"getAccount\", lecturesIdsList).then((lectures)=>{\n                        lectures = lectures.toJS();\n\n                        let teachersLecturesList = [];\n\n                        for(let lecture of lectures)  {\n                            let currentTeacherId = lecture.active.account_auths[0][0];\n                            if(currentTeacherId == teacherAccount) {\n                                teachersLecturesList.push({\n                                    'id': lecture.id,\n                                    'name': lecture.name\n                                });\n                            }\n                        }\n\n                        if(teachersLecturesList.length == 0){\n                            resolve([]);\n                            return;\n                        }\n\n\n                        this.__processLectureQueue(teachersLecturesList, 0, resolve)\n                    }).catch(reject)\n\n                }).catch(reject);\n            }).catch(reject);\n        });\n    }\n\n\n\n\n\n}\n\nexport {TeacherApi}","/**\n * Created by superpchelka on 23.02.18.\n */\n\nimport {PrivateKey} from \"bitsharesjs\";\n\nclass Account{\n\n    constructor(account, privateKey){\n        this.name=account;\n        this.privateKey=privateKey?PrivateKey.fromWif(privateKey):'';\n    }\n\n}\n\nexport {Account}","/**\n * Created by superpchelka on 23.02.18.\n */\n\nlet utSchoolToken = 'UTSCHOOL';\nlet utSchoolTokenTicket = utSchoolToken+'.TICKET';\nlet utSchoolTokenSession = utSchoolToken+'.SESSION';\nlet utSchoolTokenGrade = utSchoolToken+'.GRADE';\n\nlet utSchoolAccount='ut-school';\nlet utSchoolFaucet='u-tech-faucet';\n\n\n\n\nexport {utSchoolToken, utSchoolTokenTicket, utSchoolTokenSession, utSchoolTokenGrade, utSchoolAccount, utSchoolFaucet}",null]}